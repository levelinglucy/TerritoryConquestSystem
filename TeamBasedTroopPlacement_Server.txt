-- TeamBasedTroopPlacement_Server.lua
-- Handles server-side logic for placing units by team within owned territories

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CollectionService = game:GetService("CollectionService")
local TroopModels = ReplicatedStorage:WaitForChild("TroopModels")

-- CONFIGURATION
local TROOP_LIMIT_ENABLED = true
local RESOURCE_COST_ENABLED = true
local MAX_TROOPS_PER_TERRITORY = 5
local DEFAULT_COST = 10

-- Optional upgrade cost map
local TROOP_COSTS = {
    Infantry = 10,
    Tank = 25,
    Artillery = 40
}

-- RemoteEvent for client-to-server troop placement
local placeTroopRemote = Instance.new("RemoteEvent")
placeTroopRemote.Name = "PlaceTroopRemote"
placeTroopRemote.Parent = ReplicatedStorage

-- Count the number of troops a team has in a specific model (territory)
local function countTeamTroopsInTerritory(teamName, territoryModel)
    local count = 0
    for _, descendant in ipairs(territoryModel:GetDescendants()) do
        if descendant:IsA("Model") and descendant:FindFirstChild("OwnerTeam") then
            if descendant.OwnerTeam.Value == teamName then
                count += 1
            end
        end
    end
    return count
end

-- On placement attempt
placeTroopRemote.OnServerEvent:Connect(function(player, modelName, position)
    local modelTemplate = TroopModels:FindFirstChild(modelName)
    if not modelTemplate then return end

    local team = player.Team
    if not team then return end

    -- Validate placement location: must be in team's tagged territory
    local territoryTag = "Territory_" .. team.Name
    local region = workspace:FindPartOnRayWithWhitelist(
        Ray.new(position + Vector3.new(0, 50, 0), Vector3.new(0, -100, 0)),
        CollectionService:GetTagged(territoryTag)
    )

    if not region then
        warn("Invalid placement. Not your team's territory.")
        return
    end

    local territoryModel = region:FindFirstAncestorOfClass("Model") or region:FindFirstAncestorWhichIsA("Folder")
    if not territoryModel then
        warn("No valid territory container found.")
        return
    end

    if TROOP_LIMIT_ENABLED then
        local troopCount = countTeamTroopsInTerritory(team.Name, territoryModel)
        if troopCount >= MAX_TROOPS_PER_TERRITORY then
            warn("Troop limit reached for this territory.")
            return
        end
    end

    if RESOURCE_COST_ENABLED then
        local stats = player:FindFirstChild("leaderstats")
        local resources = stats and stats:FindFirstChild("Resources")
        local cost = TROOP_COSTS[modelName] or DEFAULT_COST
        if not resources or resources.Value < cost then
            warn("Not enough resources.")
            return
        end
        resources.Value -= cost
    end

    -- Place the unit
    local newModel = modelTemplate:Clone()
    newModel:SetPrimaryPartCFrame(CFrame.new(position))
    newModel.Parent = territoryModel

    -- Tag with team ownership
    local teamTag = Instance.new("StringValue")
    teamTag.Name = "OwnerTeam"
    teamTag.Value = team.Name
    teamTag.Parent = newModel
end)
